{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":4,"numPassedTests":12,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":4,"numTotalTests":12,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1568896142258,"success":true,"testResults":[{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":2,"numPendingTests":0,"perfStats":{"end":1568896147289,"start":1568896142661},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/danny/code/elevation/tests/stacks-queues-lesson-exercises-solutions/tests/exercises/ex-2.test.js","testResults":[{"ancestorTitles":["Exercise 2"],"duration":9,"failureMessages":[],"fullName":"Exercise 2 Should create a `getMin` method which returns the minimum value in the stack","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create a `getMin` method which returns the minimum value in the stack"},{"ancestorTitles":["Exercise 2"],"duration":4396,"failureMessages":[],"fullName":"Exercise 2 The `getMin` method should be in O(1)","location":null,"numPassingAsserts":0,"status":"passed","title":"The `getMin` method should be in O(1)"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":2,"numPendingTests":0,"perfStats":{"end":1568896147770,"start":1568896147303},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/danny/code/elevation/tests/stacks-queues-lesson-exercises-solutions/tests/exercises/ex-3.test.js","testResults":[{"ancestorTitles":["Exercise 3"],"duration":11,"failureMessages":[],"fullName":"Exercise 3 Should create a DuoQueue which consists of ","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create a DuoQueue which consists of "},{"ancestorTitles":["Exercise 3"],"duration":285,"failureMessages":[],"fullName":"Exercise 3 The balanceQueue method should run in O(1)","location":null,"numPassingAsserts":0,"status":"passed","title":"The balanceQueue method should run in O(1)"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"perfStats":{"end":1568896147839,"start":1568896147783},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/danny/code/elevation/tests/stacks-queues-lesson-exercises-solutions/tests/spot-check-1/ex-1.test.js","testResults":[{"ancestorTitles":["exercise1"],"duration":4,"failureMessages":[],"fullName":"exercise1 Should create a `push` method which adds a new element to the top of the stack","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create a `push` method which adds a new element to the top of the stack"},{"ancestorTitles":["exercise1"],"duration":4,"failureMessages":[],"fullName":"exercise1 Should create a `peek` method which returns the top element of the stack","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create a `peek` method which returns the top element of the stack"},{"ancestorTitles":["exercise1"],"duration":8,"failureMessages":[],"fullName":"exercise1 Should create a `pop` method which removes the top element of the stack","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create a `pop` method which removes the top element of the stack"},{"ancestorTitles":["exercise1"],"duration":5,"failureMessages":[],"fullName":"exercise1 Should create an `isEmpty` method which returns `true` if the stack is empty and `false` otherwise","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create an `isEmpty` method which returns `true` if the stack is empty and `false` otherwise"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"perfStats":{"end":1568896147893,"start":1568896147849},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/danny/code/elevation/tests/stacks-queues-lesson-exercises-solutions/tests/exercises/ex-1.test.js","testResults":[{"ancestorTitles":["Exercise 1"],"duration":4,"failureMessages":[],"fullName":"Exercise 1 Should create an `enqueue` method which adds a new element to the end of the queue","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create an `enqueue` method which adds a new element to the end of the queue"},{"ancestorTitles":["Exercise 1"],"duration":1,"failureMessages":[],"fullName":"Exercise 1 Should create a `peek` method which returns the front element of the queue","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create a `peek` method which returns the front element of the queue"},{"ancestorTitles":["Exercise 1"],"duration":7,"failureMessages":[],"fullName":"Exercise 1 Should create a `dequeue` method which removes the front element of the queue","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create a `dequeue` method which removes the front element of the queue"},{"ancestorTitles":["Exercise 1"],"duration":6,"failureMessages":[],"fullName":"Exercise 1 Should create an `isEmpty` method which returns `true` if the queue is empty and `false` otherwise","location":null,"numPassingAsserts":0,"status":"passed","title":"Should create an `isEmpty` method which returns `true` if the queue is empty and `false` otherwise"}],"sourceMaps":{},"skipped":false,"leaks":false}],"wasInterrupted":false}